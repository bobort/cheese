{"version":3,"sources":["NumberCall.js","App.js","serviceWorker.js","index.js"],"names":["getCallLetter","r","NumberCall","props","callNumber","previous","state","parseInt","Math","random","includes","length","setState","number","column","concat","sort","a","b","render","previousItems","map","key","toString","className","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAEA,SAASA,EAAcC,GACnB,OAAOA,GAAK,GAAK,IAAMA,GAAK,GAAK,IAAMA,GAAK,GAAK,IAAMA,GAAK,GAAK,IAAM,I,IAGtDC,E,YACjB,WAAYC,GAAQ,IAAD,uBACf,4CAAMA,KASVC,WAAa,WACT,IAAMC,EAAW,EAAKC,MAAMD,SACxBJ,EAAI,EACR,GACIA,EAAIM,SAAS,EAAoB,GAAhBC,KAAKC,gBAClBJ,EAASK,SAAST,IAAMI,EAASM,OAAS,IAC1B,KAApBN,EAASM,OACT,EAAKC,SAAS,CACVC,OAAQ,QACRC,OAAQ,KAGZ,EAAKF,SAAS,CACVC,OAAQZ,EACRa,OAAQd,EAAcC,GACtBI,SAAUA,EAASU,OAAOd,GAAGe,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,QAzBzC,EA8BnBC,OAAS,WACL,IAAMC,EAAgB,EAAKd,MAAMD,SAASgB,KAAI,SAACR,GAAD,OAC1C,wBAAIS,IAAKT,EAAOU,YACXvB,EAAca,IAAWA,EAAS,GAAK,IAAMA,EAASA,OAG/D,OACI,6BACI,0BAAMW,UAAU,iBACZ,6BACK,EAAKlB,MAAMQ,OAAQ,EAAKR,MAAMO,OAAS,GAAK,IAAM,EAAKP,MAAMO,OAAS,EAAKP,MAAMO,QAEtF,4BAAQY,QAAS,EAAKrB,YAAtB,qBAIJ,0BAAMoB,UAAU,kBACZ,4BACKJ,MA9CjB,IAAMnB,EAAIM,SAAS,EAAoB,GAAhBC,KAAKC,UAFb,OAGf,EAAKH,MAAQ,CACTO,OAAQZ,EACRa,OAAQd,EAAcC,GACtBI,SAAU,CAACJ,IANA,E,2BADiByB,IAAMC,WCM/BC,MARf,WACE,OACE,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,gBAAe,kBAAC,EAAD,SCKlBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASf,OAAO,kBAAC,EAAD,MAASgB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.24c2d15b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction getCallLetter(r) {\r\n    return r <= 12 ? \"B\" : r <= 24 ? \"I\" : r <= 36 ? \"N\" : r <= 48 ? \"G\" : \"O\";\r\n}\r\n\r\nexport default class NumberCall extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const r = parseInt(1 + Math.random() * 59);\r\n        this.state = {\r\n            number: r,\r\n            column: getCallLetter(r),\r\n            previous: [r]\r\n        };\r\n    }\r\n\r\n    callNumber = () => {\r\n        const previous = this.state.previous;\r\n        let r = 0;\r\n        do {\r\n            r = parseInt(1 + Math.random() * 60);\r\n        } while(previous.includes(r) && previous.length < 60);\r\n        if (previous.length === 60) {\r\n            this.setState({\r\n                number: \"Done!\",\r\n                column: \"\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                number: r,\r\n                column: getCallLetter(r),\r\n                previous: previous.concat(r).sort((a, b) => a - b)\r\n            });\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        const previousItems = this.state.previous.map((number) =>\r\n            <li key={number.toString()}>\r\n                {getCallLetter(number) + (number < 10 ? \"0\" + number : number)}\r\n            </li>\r\n        );\r\n        return (\r\n            <div>\r\n                <span className=\"number-column\">\r\n                    <div>\r\n                        {this.state.column}{this.state.number < 10 ? \"0\" + this.state.number : this.state.number}\r\n                    </div>\r\n                    <button onClick={this.callNumber}>\r\n                        Call New Number!\r\n                    </button>\r\n                </span>\r\n                <span className=\"history-column\">\r\n                    <ul>\r\n                        {previousItems}\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport NumberCall from \"./NumberCall.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"current-call\"><NumberCall /></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}